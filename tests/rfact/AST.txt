ProgramASTnode:
 FunDeclASTnode:
  FunProtoASTnode: int multiplyNumbers(int) <line: 3, column: 5>
  FunBodyASTnode:
   BlockASTnode:
    VarDeclASTnode: int result <line: 4, column: 9>
    ExprASTnode:
     AssignASTnode:
      IdentASTnode: result <line: 5, column: 5>
      ExprASTnode:
       IntASTnode: 0 <line: 5, column: 14>
    IfASTnode:
     ExprASTnode:
      BinOpASTnode:
       Binary Operation: >=
       LHS:
        ExprASTnode:
         IdentASTnode: n <line: 7, column: 9>
       RHS:
        ExprASTnode:
         IntASTnode: 1 <line: 7, column: 14>
     BlockASTnode:
      ExprASTnode:
       AssignASTnode:
        IdentASTnode: result <line: 8, column: 9>
        ExprASTnode:
         BinOpASTnode:
          Binary Operation: *
          LHS:
           ExprASTnode:
            IdentASTnode: n <line: 8, column: 18>
          RHS:
           ExprASTnode:
            FunCallASTnode:
             IdentASTnode: multiplyNumbers <line: 8, column: 20>
             Args:
              ExprASTnode:
               BinOpASTnode:
                Binary Operation: -
                LHS:
                 ExprASTnode:
                  IdentASTnode: n <line: 8, column: 36>
                RHS:
                 ExprASTnode:
                  IntASTnode: 1 <line: 8, column: 38>
     ElseStmt:
      BlockASTnode:
       ExprASTnode:
        AssignASTnode:
         IdentASTnode: result <line: 11, column: 9>
         ExprASTnode:
          IntASTnode: 1 <line: 11, column: 18>
    ReturnASTnode:
     ExprASTnode:
      IdentASTnode: result <line: 13, column: 12>
 FunDeclASTnode:
  FunProtoASTnode: int rfact(int) <line: 16, column: 5>
  FunBodyASTnode:
   BlockASTnode:
    ReturnASTnode:
     ExprASTnode:
      FunCallASTnode:
       IdentASTnode: multiplyNumbers <line: 17, column: 12>
       Args:
        ExprASTnode:
         IdentASTnode: n <line: 17, column: 28>